using System;
using System.IO;
using Silk.NET.OpenGL;

namespace Tutorial
{
    public class Shader : IDisposable
    {
        private uint _programID;
        private GL _gl;

        public Shader(GL gl, string vertexPath, string fragmentPath)
        {
            _gl = gl;

            uint vertex = LoadShader(ShaderType.VertexShader, vertexPath);
            uint fragment = LoadShader(ShaderType.FragmentShader, fragmentPath);
            _programID = _gl.CreateProgram();//4.两个着色器都创建编译好了。通过Attach和Link将其组装成一个着色器程序。
            _gl.AttachShader(_programID, vertex);
            _gl.AttachShader(_programID, fragment);
            _gl.LinkProgram(_programID);

            _gl.GetProgram(_programID, GLEnum.LinkStatus, out var status);//5.检查链接状态
            if (status == 0)
            {
                throw new Exception($"Program failed to link with error: {_gl.GetProgramInfoLog(_programID)}");
            }

            _gl.DetachShader(_programID, vertex);//5. 一旦Link成功，GPU驱动就将程序代码复制到了那个Program中，原来的着色器对象类似于中间文件，已经没用了，立即删除。
            _gl.DetachShader(_programID, fragment);
            _gl.DeleteShader(vertex);
            _gl.DeleteShader(fragment);
        }

        public void Use()
        {
            _gl.UseProgram(_programID);//6. 激活这个着色器程序，可被使用
        }

        public void SetUniform(string name, int value)
        {
            int location = _gl.GetUniformLocation(_programID, name);
            if (location == -1)
            {
                throw new Exception($"{name} uniform not found on shader.");
            }
            _gl.Uniform1(location, value);
        }

        public void SetUniform(string name, float value)
        {
            int location = _gl.GetUniformLocation(_programID, name);
            if (location == -1)
            {
                throw new Exception($"{name} uniform not found on shader.");
            }
            _gl.Uniform1(location, value);
        }

        public void Dispose()
        {
            _gl.DeleteProgram(_programID);
        }

        private uint LoadShader(ShaderType type, string path)
        {
            string src = File.ReadAllText(path);
            uint handle = _gl.CreateShader(type);//1.根据类型创建一个空的着色器对象
            _gl.ShaderSource(handle, src);//2. 把着色器源码附加到着色器对象上
            _gl.CompileShader(handle);//3.编译它

            string infoLog = _gl.GetShaderInfoLog(handle);
            if (!string.IsNullOrWhiteSpace(infoLog))
            {
                throw new Exception($"Error compiling shader of type {type}, failed with error {infoLog}");
            }

            return handle;
        }
    }
}
